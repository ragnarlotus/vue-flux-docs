import{_ as t,o as e,c as a,b as n}from"./app-7e36012f.js";const s={},i=n(`<h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Creates a parallax effect given an image. It can recreate 3 types, relative, fixed and static.</p><h4 id="relative" tabindex="-1"><a class="header-anchor" href="#relative" aria-hidden="true">#</a> Relative</h4><p>This type is the default and moves the image with the defined offset when scrolling until reaches the edge.</p><h4 id="fixed" tabindex="-1"><a class="header-anchor" href="#fixed" aria-hidden="true">#</a> Fixed</h4><p>This is works pretty like the relative except because the image will not start moving until the whole image is visible.</p><h4 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> Static</h4><p>Creates window effect where the image remains static and can be viewed on scrolling, seeing the piece of the image revealed depding on the position of the scroll.</p><h2 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> Component</h2><p>It has the CSS defined with display flex, position relative and overflow hidden.</p><p>The component can have the following attributes.</p><table><thead><tr><th>Attribute</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>src</td><td>String</td><td>true</td><td>The image URL to be displayed</td></tr><tr><td>holder</td><td>Object</td><td>false</td><td>Represents the object that should be watched for scrolling. By default is window</td></tr><tr><td>type</td><td>String</td><td>false</td><td>Depending on the type the effect will differ. Values can be relative, static and fixed, by default the type is relative</td></tr><tr><td>height</td><td>String</td><td>false</td><td>The height the image should have in pixels, by default is auto which means that will auto detect size by content or defined by CSS</td></tr><tr><td>offset</td><td>String</td><td>false</td><td>Is the amount of image hidden that will be displayed when scrolling. If set in percentage the amount of pixels will be calculated in reference of height. Default is 60%</td></tr></tbody></table><p>Example:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flux-parallax</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slides/1.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>300px<span class="token punctuation">&quot;</span></span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>80%<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>CONTENT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flux-parallax</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><table><thead><tr><th>Method</th><th>Parameters</th><th>Description</th></tr></thead><tbody><tr><td>setCss</td><td>css</td><td>Object with the style to be applied directly</td></tr><tr><td>resize</td><td></td><td>Recalculates the sizes</td></tr></tbody></table>`,16),d=[i];function l(o,p){return e(),a("div",null,d)}const r=t(s,[["render",l],["__file","index.html.vue"]]);export{r as default};
