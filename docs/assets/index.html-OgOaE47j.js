import{_ as e,o as a,c as s,b as r}from"./app-50w0ji3D.js";const i={},t=r(`<h1 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h1><p>This are the resources that the slider supports.</p><p>Each resource has 2 component properties, one is used during the transitions, and the other to display. This is done this way because for some resources like videos, can&#39;t make transitions, so they use an image for the transition and when it ends it switches the image to the video to be displayed.</p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="img">Img</a></td><td>Displays an image</td></tr><tr><td><a href="video">Video</a></td><td>Displays a video</td></tr><tr><td><a href="component">Component</a></td><td>Displays vue component</td></tr></tbody></table><p>All this resources inherit the abstract class <code>Resource</code>.</p><h2 id="resource" tabindex="-1"><a class="header-anchor" href="#resource" aria-hidden="true">#</a> Resource</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> Constructor</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span>
	<span class="token literal-property property">src</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
	<span class="token literal-property property">caption</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
	<span class="token literal-property property">resizeType</span><span class="token operator">:</span> ResizeType <span class="token operator">=</span> <span class="token string">&#39;fill&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">display</span><span class="token operator">:</span> DisplayParameter<span class="token punctuation">,</span>
	<span class="token literal-property property">transition</span><span class="token operator">:</span> TransitionParameter<span class="token punctuation">,</span>
	<span class="token literal-property property">errorMessage</span><span class="token operator">:</span> string
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h3><h4 id="src-string" tabindex="-1"><a class="header-anchor" href="#src-string" aria-hidden="true">#</a> src: string</h4><p>The src url of the resource</p><h4 id="loader-promise-void-null" tabindex="-1"><a class="header-anchor" href="#loader-promise-void-null" aria-hidden="true">#</a> loader: Promise&lt;void&gt; | null</h4><p>Once called to load contains the promise in charge of loading it</p><h4 id="errormessage-string" tabindex="-1"><a class="header-anchor" href="#errormessage-string" aria-hidden="true">#</a> errorMessage: string</h4><p>If there where an error loading this will contain the error message</p><h4 id="status-resourcestatus" tabindex="-1"><a class="header-anchor" href="#status-resourcestatus" aria-hidden="true">#</a> status: ResourceStatus</h4><p>Contains the status of the resource, being one of <code>notLoaded</code>, <code>loading</code>, <code>loaded</code> or <code>error</code></p><h4 id="realsize-size" tabindex="-1"><a class="header-anchor" href="#realsize-size" aria-hidden="true">#</a> realSize: Size</h4><p>Natural size of the resource</p><h4 id="displaysize-size" tabindex="-1"><a class="header-anchor" href="#displaysize-size" aria-hidden="true">#</a> displaySize: Size</h4><p>Size of the display</p><h4 id="caption-string" tabindex="-1"><a class="header-anchor" href="#caption-string" aria-hidden="true">#</a> caption: string</h4><p>The caption that represents the resource</p><h4 id="resizetype-resizetype" tabindex="-1"><a class="header-anchor" href="#resizetype-resizetype" aria-hidden="true">#</a> resizeType: ResizeType</h4><p>The type of desired resize, being <code>fill</code> or <code>fit</code></p><h4 id="display-displayparameter" tabindex="-1"><a class="header-anchor" href="#display-displayparameter" aria-hidden="true">#</a> display: DisplayParameter</h4><p>The display component is the one that will be shown when not in transition</p><h4 id="transition-transitionparameter" tabindex="-1"><a class="header-anchor" href="#transition-transitionparameter" aria-hidden="true">#</a> transition: TransitionParameter</h4><p>The component used during the transition</p><h4 id="fillprops-object" tabindex="-1"><a class="header-anchor" href="#fillprops-object" aria-hidden="true">#</a> fillProps: Object</h4><p>The computed properties for resize filling the display</p><h4 id="fitprops-object" tabindex="-1"><a class="header-anchor" href="#fitprops-object" aria-hidden="true">#</a> fitProps: Object</h4><p>The computed properties for resize fitting the display</p><h3 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h3><h4 id="isloading-boolean" tabindex="-1"><a class="header-anchor" href="#isloading-boolean" aria-hidden="true">#</a> isLoading(): boolean</h4><p>Returns if the resource is being loaded</p><h4 id="isloaded-boolean" tabindex="-1"><a class="header-anchor" href="#isloaded-boolean" aria-hidden="true">#</a> isLoaded(): boolean</h4><p>Returns if the resource is already loaded</p><h4 id="iserror-boolean" tabindex="-1"><a class="header-anchor" href="#iserror-boolean" aria-hidden="true">#</a> isError(): boolean</h4><p>Returns if the resource has finished loading with an error</p><h4 id="getfillprops-displaysize-size-object" tabindex="-1"><a class="header-anchor" href="#getfillprops-displaysize-size-object" aria-hidden="true">#</a> getFillProps(displaySize: Size): Object</h4><p>Returns the size and position of the given display size to filling it.</p><h4 id="getfitprops-displaysize-size-object" tabindex="-1"><a class="header-anchor" href="#getfitprops-displaysize-size-object" aria-hidden="true">#</a> getFitProps(displaySize: Size): Object</h4><p>Returns the size and position of the given display size to fit it.</p><h4 id="getresizeprops-size-size-offset-position-object" tabindex="-1"><a class="header-anchor" href="#getresizeprops-size-size-offset-position-object" aria-hidden="true">#</a> getResizeProps(size: Size, offset?: Position): Object</h4><p>Returns the size and position resizing to given size and optionally an offset.</p>`,46),n=[t];function o(d,p){return a(),s("div",null,n)}const c=e(i,[["render",o],["__file","index.html.vue"]]);export{c as default};
