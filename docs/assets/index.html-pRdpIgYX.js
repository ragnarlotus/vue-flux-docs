import{_ as t,r as e,o,c as p,d as n,e as s,a as c,b as i}from"./app-DHB0SMXO.js";const r={},l=n("h1",{id:"vueflux",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vueflux","aria-hidden":"true"},"#"),s(" VueFlux")],-1),d=n("h2",{id:"description",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#description","aria-hidden":"true"},"#"),s(" Description")],-1),u=n("p",null,"This is the main component of the slider and will be the frame that displays the resources.",-1),k={href:"http://ragnarlotus.github.io/vue-flux-docs/demos/components/vue-flux.html",target:"_blank",rel:"noopener noreferrer"},h=i(`<h2 id="size" tabindex="-1"><a class="header-anchor" href="#size" aria-hidden="true">#</a> Size</h2><p>The slider size is defined the following way:</p><ol><li>If defined by CSS that will be the size</li><li>If no width defined, will be parent&#39;s width</li><li>If no height defined, will calculate the height using a 16:9 ratio</li></ol><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>If you want to define a size, avoid using <code>width</code> and <code>height</code> directly in the style attribute, as those values will be applied always, even in full screen, not letting the slider resize itself. So better use a class for <code>.vue-flux</code> component or set the <code>style</code> attribute in the parent.</p></div><h2 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes" aria-hidden="true">#</a> Attributes</h2><p>All the attributes are reactive, so if you change their value at any moment, the slider will be updated automatically.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">VueFluxProps</span> <span class="token punctuation">{</span>
	options<span class="token operator">?</span><span class="token operator">:</span> VueFluxOptions<span class="token punctuation">;</span>
	rscs<span class="token operator">:</span> <span class="token punctuation">(</span>Resource <span class="token operator">|</span> ResourceWithOptions<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	transitions<span class="token operator">:</span> <span class="token punctuation">(</span>Component <span class="token operator">|</span> TransitionWithOptions<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> <code>options</code></h3><p>An object containing the slider options.</p><p>This are the available options.</p><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>allowFullscreen</td><td>boolean</td><td>false</td><td>Allows the slider to be displayed in full screen</td></tr><tr><td>allowToSkipTransition</td><td>boolean</td><td>true</td><td>If enabled you will be able to skip the running transition, otherwise you need to wait to interact again</td></tr><tr><td>aspectRatio</td><td>string</td><td>16:9</td><td>Aspect ratio to set the slider by <code>width:height</code> ratio</td></tr><tr><td>autohideTime</td><td>number</td><td>2500</td><td>The time in <em>ms</em> that the controls and index buttons remain visible. If set to <code>0</code> they will never disappear</td></tr><tr><td>autoplay</td><td>boolean</td><td>false</td><td>Autoplay images when preload finished</td></tr><tr><td>bindKeys</td><td>boolean</td><td>false</td><td>Binds the arrow keys of keyboard to show next or previous</td></tr><tr><td>delay</td><td>number</td><td>5000</td><td>The time in <em>ms</em> that an image will be displayed before changing to next</td></tr><tr><td>enableGestures</td><td>boolean</td><td>false</td><td>Define if in touchable screens should use gestures instead of showing control and index buttons</td></tr><tr><td>infinite</td><td>boolean</td><td>true</td><td>The slider will start over when reaches the last image, otherwise will stop</td></tr><tr><td>lazyLoad</td><td>boolean</td><td>true</td><td>Enables or disables lazy loading of images. If disabled, transitions will not begin until all images have been loaded</td></tr><tr><td>lazyLoadAfter</td><td>number</td><td>3</td><td>Indicates how many images have to be loaded before starting to load the rest in background</td></tr></tbody></table><p>This is the default options schema:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
	allowFullscreen<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
	allowToSkipTransition<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	aspectRatio<span class="token operator">:</span> <span class="token string">&#39;16:9&#39;</span><span class="token punctuation">,</span>
	autohideTime<span class="token operator">:</span> <span class="token number">2500</span><span class="token punctuation">,</span>
	autoplay<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
	bindKeys<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
	delay<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>
	enableGestures<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
	infinite<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	lazyLoad<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	lazyLoadAfter<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="rscs" tabindex="-1"><a class="header-anchor" href="#rscs" aria-hidden="true">#</a> <code>rscs</code></h3><p>The array containing the <a href="../resources">resources</a> to be displayed.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If resource can not be loaded will be omitted displaying a console warning message.</p></div><h4 id="resource-options" tabindex="-1"><a class="header-anchor" href="#resource-options" aria-hidden="true">#</a> Resource options</h4><p>In order to modify the parameters of resources, you need to do it using an object with the following schema:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ResourceWithOptions</span> <span class="token punctuation">{</span>
	resource<span class="token operator">:</span> Resource<span class="token punctuation">;</span>
	options<span class="token operator">:</span> <span class="token punctuation">{</span>
		delay<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
		stop<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="transitions" tabindex="-1"><a class="header-anchor" href="#transitions" aria-hidden="true">#</a> <code>transitions</code></h3><p>This is an array that will own the transition components.</p><p>The transitions will be run in the order defined and then will begin again from the first.</p><h4 id="included-transitions" tabindex="-1"><a class="header-anchor" href="#included-transitions" aria-hidden="true">#</a> Included transitions</h4><p>In this version there are 20 transitions included.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Check <a href="../transitions">transitions</a> to see the list.</p></div><h4 id="custom-transitions" tabindex="-1"><a class="header-anchor" href="#custom-transitions" aria-hidden="true">#</a> Custom transitions</h4><p>To use a custom transition, we need to import it and include it in the transitions array</p><p>Example:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> shallowReactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
   VueFlux<span class="token punctuation">,</span>
   Img<span class="token punctuation">,</span>
   Book<span class="token punctuation">,</span>
   Zip<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-flux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;vue-flux/style.css&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> CustomTransition1 <span class="token keyword">from</span> <span class="token string">&#39;CustomTransition1.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> CustomTransition2 <span class="token keyword">from</span> <span class="token string">&#39;CustomTransition2.vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> vfRscs <span class="token operator">=</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
   <span class="token keyword">new</span> <span class="token class-name">Img</span><span class="token punctuation">(</span><span class="token string">&#39;URL1&#39;</span> <span class="token string">&#39;img 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token keyword">new</span> <span class="token class-name">Img</span><span class="token punctuation">(</span><span class="token string">&#39;URL2&#39;</span> <span class="token string">&#39;img 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token keyword">new</span> <span class="token class-name">Img</span><span class="token punctuation">(</span><span class="token string">&#39;URL3&#39;</span> <span class="token string">&#39;img 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> vfTransitions <span class="token operator">=</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Book<span class="token punctuation">,</span> Zip<span class="token punctuation">,</span> CustomTransition1<span class="token punctuation">,</span> CustomTransition2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VueFlux</span>
   <span class="token attr-name">:rscs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vfRscs<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:transitions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vfTransitions<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VueFlux</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Check <a href="../custom-transitions">custom transitions</a> to know more about how to create custom transitions.</p></div><h4 id="transition-options" tabindex="-1"><a class="header-anchor" href="#transition-options" aria-hidden="true">#</a> Transition options</h4><p>In order to modify the parameters of transitions, you need to do it using an object with the following schema:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TransitionWithOptions</span> <span class="token punctuation">{</span>
   component<span class="token operator">:</span> Component<span class="token punctuation">;</span>
   options<span class="token operator">:</span> Object<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>To know which options the included transitions have, go to the transition documentation.</p><p>Following is an example of customizing an included transition and a custom transition.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> shallowReactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
   VueFlux<span class="token punctuation">,</span>
   Img<span class="token punctuation">,</span>
   Blinds2D <span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-flux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;vue-flux/style.css&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> CustomTransition <span class="token keyword">from</span> <span class="token string">&#39;CustomTransition.vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> vfRscs <span class="token operator">=</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
   <span class="token keyword">new</span> <span class="token class-name">Img</span><span class="token punctuation">(</span><span class="token string">&#39;URL1&#39;</span> <span class="token string">&#39;img 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token keyword">new</span> <span class="token class-name">Img</span><span class="token punctuation">(</span><span class="token string">&#39;URL2&#39;</span> <span class="token string">&#39;img 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token keyword">new</span> <span class="token class-name">Img</span><span class="token punctuation">(</span><span class="token string">&#39;URL3&#39;</span> <span class="token string">&#39;img 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> vfTransitions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
   component<span class="token operator">:</span> Blinds2D<span class="token punctuation">,</span>
   options<span class="token operator">:</span> <span class="token punctuation">{</span>
      tileDuration<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
      easing<span class="token operator">:</span> <span class="token string">&#39;ease-in-out&#39;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
   component<span class="token operator">:</span> CustomTransition<span class="token punctuation">,</span>
   options<span class="token operator">:</span> <span class="token punctuation">{</span>
      rows<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
      cols<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      totalDuration<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VueFlux</span>
   <span class="token attr-name">:rscs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vfRscs<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:transitions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vfTransitions<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VueFlux</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Displays the resource specified by number (or &#39;next&#39; or &#39;prev&#39;) and using the specified transition.</span>
<span class="token keyword">async</span> <span class="token function">show</span><span class="token punctuation">(</span>
	resourceIndex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> Direction <span class="token operator">=</span> Directions<span class="token punctuation">.</span>next<span class="token punctuation">,</span>
	transitionIndex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> Direction <span class="token operator">=</span> Directions<span class="token punctuation">.</span>next
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>

<span class="token comment">// Starts displaying the resources by the interval specified with [delay](#options) option.</span>
<span class="token function">play</span><span class="token punctuation">(</span>resourceIndex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> Direction <span class="token operator">=</span> Directions<span class="token punctuation">.</span>next<span class="token punctuation">,</span> delay<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>

<span class="token comment">// Stops playing images and remains in the current.</span>
<span class="token keyword">async</span> <span class="token function">stop</span><span class="token punctuation">(</span>cancelTransition<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><h2 id="slots" tabindex="-1"><a class="header-anchor" href="#slots" aria-hidden="true">#</a> Slots</h2><table><thead><tr><th>Name</th><th>Component</th><th>Description</th></tr></thead><tbody><tr><td>preloader</td><td><a href="../complements/flux-preloader">FluxPreloader</a></td><td>Defined to hold the preloading functionality</td></tr><tr><td>caption</td><td><a href="../complements/flux-caption">FluxCaption</a></td><td>Used to display the resources captions</td></tr><tr><td>controls</td><td><a href="../complements/flux-controls">FluxControls</a></td><td>Used to display the slider controls</td></tr><tr><td>index</td><td><a href="../complements/flux-index">FluxIndex</a></td><td>Used to display a resources index</td></tr><tr><td>pagination</td><td><a href="../complements/flux-pagination">FluxPagination</a></td><td>Used to display the a resources pagination</td></tr></tbody></table><h2 id="emits" tabindex="-1"><a class="header-anchor" href="#emits" aria-hidden="true">#</a> Emits</h2><table><thead><tr><th>Name</th><th>Parameters</th><th>Description</th></tr></thead><tbody><tr><td><code>created</code></td><td></td><td>fired when the slider component is created</td></tr><tr><td><code>mounted</code></td><td></td><td>fired when the slider component is mounted</td></tr><tr><td><code>unmounted</code></td><td></td><td>fired when the slider component is destroyed</td></tr><tr><td><code>play</code></td><td><code>resourceIndex: number | Direction, delay?: number</code></td><td>fired when auto playing resources</td></tr><tr><td><code>stop</code></td><td></td><td>fired when stopped to auto play resources</td></tr><tr><td><code>show</code></td><td><code>resource: PlayerResource, transition: PlayerTransition</code></td><td>fired when requested to show an image</td></tr><tr><td><code>options-updated</code></td><td></td><td>fired when the options have been updated</td></tr><tr><td><code>transitions-updated</code></td><td></td><td>fired when transitions updated</td></tr><tr><td><code>resources-preload-start</code></td><td></td><td>fired when started to preload images</td></tr><tr><td><code>resources-preload-end</code></td><td></td><td>fired when finished to preload images</td></tr><tr><td><code>resources-lazyload-start</code></td><td></td><td>fired when start to lazy loading images</td></tr><tr><td><code>resources-lazyload-end</code></td><td></td><td>fired when finished to lay loading images</td></tr><tr><td><code>fullscreen-enter</code></td><td></td><td>fired when entered in full screen mode</td></tr><tr><td><code>fullscreen-exit</code></td><td></td><td>fired when exit from full screen</td></tr><tr><td><code>transition-start</code></td><td><code>resource: PlayerResource, transition: PlayerTransition</code></td><td>fired when transition begin</td></tr><tr><td><code>transition-cancel</code></td><td><code>resource: PlayerResource, transition: PlayerTransition</code></td><td>fired when transition is running and is being cancelled</td></tr><tr><td><code>transition-end</code></td><td><code>resource: PlayerResource, transition: PlayerTransition</code></td><td>fired when transition finish</td></tr></tbody></table>`,44);function m(f,g){const a=e("ExternalLinkIcon");return o(),p("div",null,[l,d,u,n("p",null,[n("a",k,[s("Demo"),c(a)])]),h])}const b=t(r,[["render",m],["__file","index.html.vue"]]);export{b as default};
