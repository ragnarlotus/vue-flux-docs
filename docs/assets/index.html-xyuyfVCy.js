import{_ as s,r as n,o,c as r,b as e,d as c,a as i,e as a}from"./app-f_FCzlUc.js";const p={},d=a('<h1 id="fluxparallax" tabindex="-1"><a class="header-anchor" href="#fluxparallax" aria-hidden="true">#</a> FluxParallax</h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Creates a parallax effect given an image. It can recreate 3 types, <code>relative</code>, <code>visible</code> and <code>fixed</code>.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Do not forget to set the height with CSS if has no content, otherwise you probably will not see anything.</p></div>',4),l={href:"http://ragnarlotus.github.io/vue-flux-docs/demos/components/flux-parallax.html",target:"_blank",rel:"noopener noreferrer"},h=a(`<h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">FluxParallaxProps</span> <span class="token punctuation">{</span>
	rsc<span class="token operator">:</span> Resource<span class="token punctuation">;</span>
	holder<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>
	type<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;visible&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;relative&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;fixed&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;relative&#39;</span><span class="token punctuation">;</span>
	offset<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;100%&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="rsc" tabindex="-1"><a class="header-anchor" href="#rsc" aria-hidden="true">#</a> <code>rsc</code></h3><p>The resource to be displayed.</p><h3 id="holder" tabindex="-1"><a class="header-anchor" href="#holder" aria-hidden="true">#</a> <code>holder</code></h3><p>Represents the object that should be watched for scrolling.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>This parameter has no effect when the effect type set to <code>fixed</code></p></div><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> <code>type</code></h3><p>Depending on the type the effect will differ.</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>relative</code></td><td>This type is the default and moves the image with the defined offset when scrolling until reaches the edge</td></tr><tr><td><code>visible</code></td><td>This works pretty like the relative except because the image will not start moving until the whole image is visible</td></tr><tr><td><code>fixed</code></td><td>Makes the parallax element like a window through you can view the defined image, and you see the part of the image where the parallax position</td></tr></tbody></table><h3 id="offset" tabindex="-1"><a class="header-anchor" href="#offset" aria-hidden="true">#</a> <code>offset</code></h3><p>Is the amount of image hidden that will be displayed when scrolling.</p><p>If set in percentage the amount of pixels will be calculated in reference of height. So if the height is <code>300px</code>, and the offset is set to <code>100%</code> then the image will displace for <code>300px</code>.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>This parameter has no effect when the effect type set to <code>fixed</code></p></div><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Recalculates the sizes.</span>
<span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><h2 id="slots" tabindex="-1"><a class="header-anchor" href="#slots" aria-hidden="true">#</a> Slots</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td></td><td>The content showed inside the parallax component</td></tr></tbody></table>`,18);function f(u,k){const t=n("ExternalLinkIcon");return o(),r("div",null,[d,e("p",null,[e("a",l,[c("Demo"),i(t)])]),h])}const m=s(p,[["render",f],["__file","index.html.vue"]]);export{m as default};
