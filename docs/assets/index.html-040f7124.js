import{_ as e,o as s,c as n,b as a}from"./app-7e36012f.js";const t={},i=a(`<h1 id="fluxgrid" tabindex="-1"><a class="header-anchor" href="#fluxgrid" aria-hidden="true">#</a> FluxGrid</h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Component to make grid of resource or cube.</p><h2 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes" aria-hidden="true">#</a> Attributes</h2><h3 id="rows" tabindex="-1"><a class="header-anchor" href="#rows" aria-hidden="true">#</a> rows</h3><p>The number of rows the grid will be made of.</p><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Required:</strong> <code>false</code></li><li><strong>Default:</strong> <code>1</code></li></ul><h3 id="cols" tabindex="-1"><a class="header-anchor" href="#cols" aria-hidden="true">#</a> cols</h3><p>The number of cols the grid will be made of.</p><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Required:</strong> <code>false</code></li><li><strong>Default:</strong> <code>1</code></li></ul><h3 id="color" tabindex="-1"><a class="header-anchor" href="#color" aria-hidden="true">#</a> color</h3><p>Sets the background color.</p><p>The values can be any valid CSS color.</p><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Required:</strong> <code>false</code></li></ul><h3 id="colors" tabindex="-1"><a class="header-anchor" href="#colors" aria-hidden="true">#</a> colors</h3><p>Sets the background color to defined sides in case grid is made of cubes.</p><p>The values can be any valid CSS color.</p><ul><li><strong>Type:</strong> <code>Object</code></li><li><strong>Required:</strong> <code>false</code></li><li><strong>Schema:</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
   <span class="token literal-property property">front</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
   <span class="token literal-property property">back</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
   <span class="token literal-property property">top</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
   <span class="token literal-property property">bottom</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
   <span class="token literal-property property">left</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
   <span class="token literal-property property">right</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rsc" tabindex="-1"><a class="header-anchor" href="#rsc" aria-hidden="true">#</a> rsc</h3><p>The resource to be displayed.</p><p>Use this attribute if you want the grid be made of images.</p><ul><li><strong>Type:</strong> <code>Resource</code></li><li><strong>Required:</strong> <code>false</code></li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>If you use this attribute but the <code>rscs</code> is also defined, <code>rscs</code> will have preference and this will have no effect.</p></div><h3 id="rscs" tabindex="-1"><a class="header-anchor" href="#rscs" aria-hidden="true">#</a> rscs</h3><p>The object having the resources of defined sides.</p><p>Use this attribute if you want the grid to be made of cubes.</p><ul><li><strong>Type:</strong> <code>Object</code></li><li><strong>Required:</strong> <code>true</code></li><li><strong>Schema:</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
   <span class="token literal-property property">front</span><span class="token operator">:</span> Resource<span class="token punctuation">,</span>
   <span class="token literal-property property">back</span><span class="token operator">:</span> Resource<span class="token punctuation">,</span>
   <span class="token literal-property property">top</span><span class="token operator">:</span> Resource<span class="token punctuation">,</span>
   <span class="token literal-property property">bottom</span><span class="token operator">:</span> Resource<span class="token punctuation">,</span>
   <span class="token literal-property property">left</span><span class="token operator">:</span> Resource<span class="token punctuation">,</span>
   <span class="token literal-property property">right</span><span class="token operator">:</span> Resource<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="size" tabindex="-1"><a class="header-anchor" href="#size" aria-hidden="true">#</a> size</h3><p>This size is the width and height in pixels that the component will have.</p><p>The images received will be scaled and positioned to cover this size.</p><ul><li><strong>Type:</strong> <code>Size</code></li><li><strong>Required:</strong> <code>true</code></li></ul><h3 id="view-size" tabindex="-1"><a class="header-anchor" href="#view-size" aria-hidden="true">#</a> view-size</h3><p>When received, the component will overwrite the <code>size</code> attribute, but maintain the image scaled and position values.</p><ul><li><strong>Type:</strong> <code>Size</code></li><li><strong>Required:</strong> <code>false</code></li></ul><h3 id="depth" tabindex="-1"><a class="header-anchor" href="#depth" aria-hidden="true">#</a> depth</h3><p>Size in pixels for cubes&#39; depth in case the grid is made of cubes</p><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Required:</strong> <code>false</code></li><li><strong>Default:</strong> <code>0</code></li></ul><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> css</h3><p>Object with CSS styles in camel case to apply to component.</p><ul><li><strong>Type:</strong> <code>Object</code></li><li><strong>Required:</strong> <code>false</code></li></ul><h3 id="tile-css" tabindex="-1"><a class="header-anchor" href="#tile-css" aria-hidden="true">#</a> tile-css</h3><p>Object with CSS styles in camel case to be applied to all tiles.</p><ul><li><strong>Type:</strong> <code>Object</code></li><li><strong>Required:</strong> <code>false</code></li></ul><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><h3 id="setcss-css-cssproperties-void" tabindex="-1"><a class="header-anchor" href="#setcss-css-cssproperties-void" aria-hidden="true">#</a> setCss(css: CSSProperties): void</h3><p>Set CSS styles to the grid.</p><ul><li>css <ul><li>Description: an object with the CSS attributes in <strong>camel case</strong> and values.</li><li>Type: <code>Object</code></li></ul></li></ul><h3 id="transform-cb-function-void" tabindex="-1"><a class="header-anchor" href="#transform-cb-function-void" aria-hidden="true">#</a> transform(cb: Function): void</h3><p>Runs a function transform to each tile.</p><ul><li>function <ul><li>Description: function to be run per tile.</li><li>Type: <code>Function</code></li><li>Parameters: the function receives <code>component</code> and <code>index</code> as parameters.</li><li>Example:</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>grid<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">tile<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   tile<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">all 300ms ease </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">*</span> <span class="token number">100</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="show-void" tabindex="-1"><a class="header-anchor" href="#show-void" aria-hidden="true">#</a> show(): void</h3><p>Show the grid, setting <code>visibility</code> to <code>visible</code>.</p><h3 id="hide-void" tabindex="-1"><a class="header-anchor" href="#hide-void" aria-hidden="true">#</a> hide(): void</h3><p>Hide the grid, setting <code>visibility</code> to <code>hidden</code>.</p><h3 id="getrownumber-tilenumber-number-numcols-number-number" tabindex="-1"><a class="header-anchor" href="#getrownumber-tilenumber-number-numcols-number-number" aria-hidden="true">#</a> getRowNumber(tileNumber: number, numCols: number): number</h3><p>Returns the row number</p><h3 id="getcolnumber-tilenumber-number-numcols-number-number" tabindex="-1"><a class="header-anchor" href="#getcolnumber-tilenumber-number-numcols-number-number" aria-hidden="true">#</a> getColNumber(tileNumber: number, numCols: number): number</h3><p>Returns the column number</p>`,61),o=[i];function r(c,l){return s(),n("div",null,o)}const d=e(t,[["render",r],["__file","index.html.vue"]]);export{d as default};
