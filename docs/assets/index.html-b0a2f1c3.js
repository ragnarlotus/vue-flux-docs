import{_ as e,o as t,c as a,b as i}from"./app-39d482a5.js";const s={},r=i('<h1 id="fluxparallax" tabindex="-1"><a class="header-anchor" href="#fluxparallax" aria-hidden="true">#</a> FluxParallax</h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Creates a parallax effect given an image. It can recreate 3 types, relative, visible and fixed.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Do not forget to set the height with CSS if has no content, otherwise you probably will not see anything.</p></div><h2 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes" aria-hidden="true">#</a> Attributes</h2><h3 id="src" tabindex="-1"><a class="header-anchor" href="#src" aria-hidden="true">#</a> src</h3><p>The image URL to be displayed.</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Required:</strong> <code>true</code></li></ul><h3 id="holder" tabindex="-1"><a class="header-anchor" href="#holder" aria-hidden="true">#</a> holder</h3><p>Represents the object that should be watched for scrolling.</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Required:</strong> <code>false</code></li><li><strong>Default:</strong> <code>window</code></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>This parameter has no effect when the effect type set to <code>fixed</code></p></div><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h3><p>Depending on the type the effect will differ.</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Required:</strong> <code>false</code></li><li><strong>Default:</strong> <code>relative</code></li></ul><h4 id="relative" tabindex="-1"><a class="header-anchor" href="#relative" aria-hidden="true">#</a> relative</h4><p>This type is the default and moves the image with the defined offset when scrolling until reaches the edge.</p><h4 id="visible" tabindex="-1"><a class="header-anchor" href="#visible" aria-hidden="true">#</a> visible</h4><p>This works pretty like the relative except because the image will not start moving until the whole image is visible.</p><h4 id="fixed" tabindex="-1"><a class="header-anchor" href="#fixed" aria-hidden="true">#</a> fixed</h4><p>Makes the parallax element like a window through you can view the defined image, and you see the part of the image where the parallax position.</p><h3 id="offset" tabindex="-1"><a class="header-anchor" href="#offset" aria-hidden="true">#</a> offset</h3><p>Is the amount of image hidden that will be displayed when scrolling.</p><p>If set in percentage the amount of pixels will be calculated in reference of height. So if the height is <code>300px</code>, and the offset is set to <code>100%</code> then the image will displace for <code>300px</code>.</p><ul><li><strong>Type:</strong> <code>Number | String</code></li><li><strong>Required:</strong> <code>false</code></li><li><strong>Default:</strong> <code>100%</code></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>This parameter has no effect when the effect type set to <code>fixed</code></p></div><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><h3 id="resize" tabindex="-1"><a class="header-anchor" href="#resize" aria-hidden="true">#</a> resize()</h3><p>Recalculates the sizes.</p><h3 id="setcss-css" tabindex="-1"><a class="header-anchor" href="#setcss-css" aria-hidden="true">#</a> setCss(css)</h3><p>Set CSS styles to the parallax.</p><ul><li>css <ul><li>Description: an object with the CSS attributes in <strong>camel case</strong> and values.</li><li>Type: <code>Object</code></li></ul></li></ul>',32),o=[r];function d(h,n){return t(),a("div",null,o)}const c=e(s,[["render",d],["__file","index.html.vue"]]);export{c as default};
