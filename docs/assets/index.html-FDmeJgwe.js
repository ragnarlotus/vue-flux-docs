import{_ as o,r as p,o as i,c,b as a,d as n,a as t,e}from"./app-f_FCzlUc.js";const r={},l=e(`<h1 id="custom-transitions" tabindex="-1"><a class="header-anchor" href="#custom-transitions" aria-hidden="true">#</a> Custom transitions</h1><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>The basic configuration of a transition consists in the following variables;</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TransitionConf</span> <span class="token punctuation">{</span>
	totalDuration<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
	easing<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	direction<span class="token operator">?</span><span class="token operator">:</span> Direction<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="totalduration" tabindex="-1"><a class="header-anchor" href="#totalduration" aria-hidden="true">#</a> totalDuration</h3><p>Represents the transition duration in ms.</p><h3 id="easing" tabindex="-1"><a class="header-anchor" href="#easing" aria-hidden="true">#</a> easing</h3>`,7),u={href:"https://easings.net/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function",target:"_blank",rel:"noopener noreferrer"},h=e(`<h3 id="direction" tabindex="-1"><a class="header-anchor" href="#direction" aria-hidden="true">#</a> direction</h3><p>Some transitions can have a different effect depending if you go to a later or previous resource.</p><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TransitionProps</span> <span class="token punctuation">{</span>
	size<span class="token operator">:</span> Size<span class="token punctuation">;</span>
	from<span class="token operator">:</span> Resource<span class="token punctuation">;</span>
	to<span class="token operator">?</span><span class="token operator">:</span> Resource<span class="token punctuation">;</span>
	options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
	maskStyle<span class="token operator">:</span> CSSProperties<span class="token punctuation">;</span>
	displayComponent<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="size" tabindex="-1"><a class="header-anchor" href="#size" aria-hidden="true">#</a> size</h3><p>This size is the width and height of the slider.</p><h3 id="from" tabindex="-1"><a class="header-anchor" href="#from" aria-hidden="true">#</a> from</h3><p>The origin resource which is currently being displayed.</p><h3 id="to" tabindex="-1"><a class="header-anchor" href="#to" aria-hidden="true">#</a> to</h3><p>The destination resource to be displayed.</p><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h3><p>Is an object with attributes and values that will be assigned to the transition parameters.</p><h3 id="mask" tabindex="-1"><a class="header-anchor" href="#mask" aria-hidden="true">#</a> mask</h3><p>Is the Object CSS that wraps the transitions. This way you can control whether hide overflow, change perspective, or any other relevant style.</p><h3 id="displaycomponent" tabindex="-1"><a class="header-anchor" href="#displaycomponent" aria-hidden="true">#</a> displayComponent</h3><p>Refers to the component resource that is being displayed at the moment. Sometimes you may want to <code>hide()</code> it for your transition.</p><p>After the transition is finished, it will be shown automatically, since it is the component that renders the resource for displaying when no transition is running.</p><h2 id="composable" tabindex="-1"><a class="header-anchor" href="#composable" aria-hidden="true">#</a> Composable</h2><p>Transitions use the composable <code>useTransition</code> to perform basic and shared logic, like overwriting the default configuration with the options received from <code>props</code>.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">useTransition</span><span class="token punctuation">(</span>conf<span class="token operator">:</span> TransitionConf<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// All transitions must have this method, and is the one that will run the transition.</span>
<span class="token function">onPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><h2 id="exposed-elements" tabindex="-1"><a class="header-anchor" href="#exposed-elements" aria-hidden="true">#</a> Exposed elements</h2><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>Don&#39;t miss the this section to make your transition work</p></div>`,24),k={href:"https://vuejs.org/api/sfc-script-setup.html#defineexpose",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code>totalDuration<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token function">onPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><h2 id="using-them" tabindex="-1"><a class="header-anchor" href="#using-them" aria-hidden="true">#</a> Using them</h2><p>To use a custom transition, we need to import it and include it in the transitions array, that is all ðŸ˜‰</p><p>Example:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> shallowReactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
   VueFlux<span class="token punctuation">,</span>
   Img<span class="token punctuation">,</span>
   Book<span class="token punctuation">,</span>
   Zip<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-flux&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;vue-flux/style.css&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> CustomTransition1 <span class="token keyword">from</span> <span class="token string">&#39;CustomTransition1.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> CustomTransition2 <span class="token keyword">from</span> <span class="token string">&#39;CustomTransition2.vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> rscs <span class="token operator">=</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
   <span class="token keyword">new</span> <span class="token class-name">Img</span><span class="token punctuation">(</span><span class="token string">&#39;URL1&#39;</span> <span class="token string">&#39;img 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token keyword">new</span> <span class="token class-name">Img</span><span class="token punctuation">(</span><span class="token string">&#39;URL2&#39;</span> <span class="token string">&#39;img 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token keyword">new</span> <span class="token class-name">Img</span><span class="token punctuation">(</span><span class="token string">&#39;URL3&#39;</span> <span class="token string">&#39;img 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> transitions <span class="token operator">=</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Book<span class="token punctuation">,</span> Zip<span class="token punctuation">,</span> CustomTransition1<span class="token punctuation">,</span> CustomTransition2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VueFlux</span>
   <span class="token attr-name">:rscs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rscs<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:transitions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transitions<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VueFlux</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,6),g={class:"custom-container tip"},f=a("p",{class:"custom-container-title"},"TIP",-1),y={href:"https://github.com/ragnarlotus/vue-flux/tree/main/src/transitions",target:"_blank",rel:"noopener noreferrer"};function b(v,w){const s=p("ExternalLinkIcon");return i(),c("div",null,[l,a("p",null,[n("The animation easing for the transition. You can take a look at "),a("a",u,[n("easings.net"),t(s)]),n(" for a visual examples.")]),a("p",null,[n("Its value can be any accepted by "),a("a",d,[n("transition-timing-function"),t(s)])]),h,a("p",null,[n("You must "),a("a",k,[n("expose"),t(s)]),n(" the following data and method.")]),m,a("div",g,[f,a("p",null,[n("You can see the "),a("a",y,[n("transitions source code"),t(s)]),n(" to get more ideas or examples.")])])])}const _=o(r,[["render",b],["__file","index.html.vue"]]);export{_ as default};
