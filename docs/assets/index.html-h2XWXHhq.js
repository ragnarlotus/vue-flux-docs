import{_ as e,o as a,c as s,e as t}from"./app-f_FCzlUc.js";const i={},r=t(`<h1 id="fluxvortex" tabindex="-1"><a class="header-anchor" href="#fluxvortex" aria-hidden="true">#</a> FluxVortex</h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Image component made of concentric circles.</p><h2 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes" aria-hidden="true">#</a> Attributes</h2><h3 id="circles" tabindex="-1"><a class="header-anchor" href="#circles" aria-hidden="true">#</a> circles</h3><p>The number of circles the vortex will be made of.</p><ul><li><strong>Type:</strong> <code>Number</code></li><li><strong>Required:</strong> <code>false</code></li><li><strong>Default:</strong> <code>1</code></li></ul><h3 id="image" tabindex="-1"><a class="header-anchor" href="#image" aria-hidden="true">#</a> image</h3><p>The URL of the image to be displayed.</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Required:</strong> <code>true</code></li></ul><h3 id="size" tabindex="-1"><a class="header-anchor" href="#size" aria-hidden="true">#</a> size</h3><p>This size is the width and height in pixels that the component will have.</p><p>The image will be scaled and positioned to cover this size.</p><ul><li><strong>Type:</strong> <code>Object</code></li><li><strong>Required:</strong> <code>true</code></li><li><strong>Schema:</strong></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
   <span class="token literal-property property">width</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
   <span class="token literal-property property">height</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> css</h3><p>Object with CSS styles in camel case to apply to component.</p><ul><li><strong>Type:</strong> <code>Object</code></li><li><strong>Required:</strong> <code>false</code></li></ul><h3 id="tile-css" tabindex="-1"><a class="header-anchor" href="#tile-css" aria-hidden="true">#</a> tile-css</h3><p>Object with CSS styles in camel case to be applied to all tiles.</p><ul><li><strong>Type:</strong> <code>Object</code></li><li><strong>Required:</strong> <code>false</code></li></ul><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><h3 id="setcss-css" tabindex="-1"><a class="header-anchor" href="#setcss-css" aria-hidden="true">#</a> setCss(css)</h3><p>Set CSS styles to the image.</p><ul><li>css <ul><li>Description: an object with the CSS attributes in <strong>camel case</strong> and values.</li><li>Type: <code>Object</code></li></ul></li></ul><h3 id="transform-css" tabindex="-1"><a class="header-anchor" href="#transform-css" aria-hidden="true">#</a> transform(css)</h3><p>Sets the CSS styles to be transformed to within a transition.</p><ul><li>css <ul><li>Description: an object with the CSS attributes in <strong>camel case</strong> and values.</li><li>Type: <code>Object</code></li></ul></li></ul><h3 id="show" tabindex="-1"><a class="header-anchor" href="#show" aria-hidden="true">#</a> show()</h3><p>Show the image, setting <code>visibility</code> to <code>visible</code>.</p><h3 id="hide" tabindex="-1"><a class="header-anchor" href="#hide" aria-hidden="true">#</a> hide()</h3><p>Hide the image, setting <code>visibility</code> to <code>hidden</code>.</p>`,32),o=[r];function n(c,d){return a(),s("div",null,o)}const h=e(i,[["render",n],["__file","index.html.vue"]]);export{h as default};
