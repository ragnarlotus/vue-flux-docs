import{_ as e,r as o,o as c,c as l,b as a,d as n,a as t,e as p}from"./app-f_FCzlUc.js";const i={},r=p(`<h1 id="custom-transitions" tabindex="-1"><a class="header-anchor" href="#custom-transitions" aria-hidden="true">#</a> Custom transitions</h1><p>Transitions use the mixin <code>BaseTransition</code> to perform basic and shared logic.</p><h2 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> Data</h2><h3 id="totalduration" tabindex="-1"><a class="header-anchor" href="#totalduration" aria-hidden="true">#</a> totalDuration</h3><p>Represents the transition duration in ms.</p><ul><li><strong>Type:</strong> <code>Number</code></li><li><strong>Required:</strong> <code>true</code></li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>You must specify this in data to let the slider know when transition ends.</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If the duration depends on transition options, you can set its value in the <code>created</code> hook, but don&#39;t forget to initialize it.</p></div><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><h3 id="size" tabindex="-1"><a class="header-anchor" href="#size" aria-hidden="true">#</a> size</h3><p>This size is the width and height of the slider.</p><ul><li><strong>Type:</strong> <code>Object</code></li><li><strong>Schema:</strong></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
   <span class="token literal-property property">width</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
   <span class="token literal-property property">height</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="from" tabindex="-1"><a class="header-anchor" href="#from" aria-hidden="true">#</a> from</h3><p>The origin image which is currently being displayed.</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Required:</strong> <code>true</code></li></ul><h3 id="to" tabindex="-1"><a class="header-anchor" href="#to" aria-hidden="true">#</a> to</h3><p>The destination image to be displayed.</p><ul><li><strong>Type:</strong> <code>String</code></li></ul><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h3><p>Is an object with attributes and values that will be assigned to the transition data.</p><ul><li><strong>Type:</strong> <code>Object</code></li></ul><h3 id="mask" tabindex="-1"><a class="header-anchor" href="#mask" aria-hidden="true">#</a> mask</h3><p>Is the mask CSS that wraps the transitions. This way you can control whether hide overflow, perspective, or any other relevant style.</p><ul><li><strong>Type:</strong> <code>Object</code></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Remember that all the properties of this object are and must be camel case.</p></div><h3 id="current" tabindex="-1"><a class="header-anchor" href="#current" aria-hidden="true">#</a> current</h3><p>Refers to the image that is being displayed.</p><ul><li><strong>Type:</strong> <code>FluxImage</code></li></ul><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> Hooks</h2><h3 id="created" tabindex="-1"><a class="header-anchor" href="#created" aria-hidden="true">#</a> created</h3><p>You can initialize data, modify mask or any other preparative task on component in the <code>created</code> hook.</p><h3 id="mounted" tabindex="-1"><a class="header-anchor" href="#mounted" aria-hidden="true">#</a> mounted</h3><p>The transition will run on <code>mounted</code> hook.</p><h3 id="played" tabindex="-1"><a class="header-anchor" href="#played" aria-hidden="true">#</a> played</h3><p>Run when transition is called to play</p><h3 id="beforedestroy" tabindex="-1"><a class="header-anchor" href="#beforedestroy" aria-hidden="true">#</a> beforeDestroy</h3><p>You can also use the <code>beforeDestroy</code> hook to run anything you need when transition ends.</p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><p>The <code>BaseTransition</code> mixin implements a couple of method helpers for the case the transition has different effect the going to prev or next.</p><h3 id="setupprev" tabindex="-1"><a class="header-anchor" href="#setupprev" aria-hidden="true">#</a> setupPrev()</h3><p>If defined, this method will be run after the component have been created and the direction is <code>prev</code>.</p><h3 id="setupnext" tabindex="-1"><a class="header-anchor" href="#setupnext" aria-hidden="true">#</a> setupNext()</h3><p>If defined, this method will be run after the component have been created and the direction is <code>next</code>.</p><h3 id="playprev" tabindex="-1"><a class="header-anchor" href="#playprev" aria-hidden="true">#</a> playPrev()</h3><p>If defined, this method will be run after the component have been played and the direction is <code>prev</code>.</p><h3 id="playnext" tabindex="-1"><a class="header-anchor" href="#playnext" aria-hidden="true">#</a> playNext()</h3><p>If defined, this method will be run after the component have been played and the direction is <code>next</code>.</p><h3 id="getdelay-data" tabindex="-1"><a class="header-anchor" href="#getdelay-data" aria-hidden="true">#</a> getDelay(data)</h3><p>This method will call the defined methods <code>getDelayPrev</code> or <code>getDelayNext</code> depending on the direction.</p><p>Those methods will receive the same data parameter that you pass.</p><p>This is just a handy shortcut to get delay. If case the effect doesn&#39;t change by direction you can just define you method <code>getDelay</code> overwriting the mixin method.</p><h2 id="using-it" tabindex="-1"><a class="header-anchor" href="#using-it" aria-hidden="true">#</a> Using it</h2>`,53),u={href:"/v6/components/vue-flux#custom-transitions",target:"_blank",rel:"noopener noreferrer"},k=p(`<h2 id="example-1-waterfall" tabindex="-1"><a class="header-anchor" href="#example-1-waterfall" aria-hidden="true">#</a> Example 1 - Waterfall</h2><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flux-grid</span>
   <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>grid<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rows<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cols<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>size<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:image</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>from<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> BaseTransition <span class="token keyword">from</span> <span class="token string">&#39;@/mixins/BaseTransition.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> FluxGrid <span class="token keyword">from</span> <span class="token string">&#39;@/components/FluxGrid.vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;TransitionWaterfall&#39;</span><span class="token punctuation">,</span>

   <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      FluxGrid<span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>

   <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      BaseTransition<span class="token punctuation">,</span>
   <span class="token punctuation">]</span><span class="token punctuation">,</span>

   <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tileDuration</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>
      <span class="token literal-property property">totalDuration</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">easing</span><span class="token operator">:</span> <span class="token string">&#39;cubic-bezier(0.55, 0.055, 0.675, 0.19)&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tileDelay</span><span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

   <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>totalDuration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tileDelay <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cols <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tileDuration<span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>

   <span class="token function">played</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>grid<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">tile<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
         tile<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">all </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>tileDuration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>easing<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token string">&#39;0.1&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">translateY(100%)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>

   <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">getDelayPrev</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cols <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tileDelay<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token function">getDelayNext</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tileDelay<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="example-2-wave" tabindex="-1"><a class="header-anchor" href="#example-2-wave" aria-hidden="true">#</a> Example 2 - Wave</h2><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flux-grid</span>
   <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>grid<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rows<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cols<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>size<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:images</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>images<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:colors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>colors<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:depth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>size.height<span class="token punctuation">&quot;</span></span>
   <span class="token attr-name">:css</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gridCss<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> BaseTransition <span class="token keyword">from</span> <span class="token string">&#39;@/mixins/BaseTransition.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> FluxGrid <span class="token keyword">from</span> <span class="token string">&#39;@/components/FluxGrid.vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;TransitionWave&#39;</span><span class="token punctuation">,</span>

   <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      FluxGrid<span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>

   <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      BaseTransition<span class="token punctuation">,</span>
   <span class="token punctuation">]</span><span class="token punctuation">,</span>

   <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tileDuration</span><span class="token operator">:</span> <span class="token number">900</span><span class="token punctuation">,</span>
      <span class="token literal-property property">totalDuration</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">easing</span><span class="token operator">:</span> <span class="token string">&#39;cubic-bezier(0.3, -0.3, 0.735, 0.285)&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tileDelay</span><span class="token operator">:</span> <span class="token number">110</span><span class="token punctuation">,</span>
      <span class="token literal-property property">sideColor</span><span class="token operator">:</span> <span class="token string">&#39;#333&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">gridCss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">overflow</span><span class="token operator">:</span> <span class="token string">&#39;visible&#39;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">perspective</span><span class="token operator">:</span> <span class="token string">&#39;1200px&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">images</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

   <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>mask<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">&#39;visible&#39;</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>totalDuration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tileDelay <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cols <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tileDuration<span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>images <span class="token operator">=</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">front</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span>
         <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>

   <span class="token function">played</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sideColor<span class="token punctuation">,</span>
         <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sideColor<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>grid<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">tile<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
         tile<span class="token punctuation">.</span><span class="token function">setCss</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">all </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>tileDuration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>easing<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         tile<span class="token punctuation">.</span><span class="token function">turnBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>

   <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>

   <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">getDelayPrev</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cols <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tileDelay<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token function">getDelayNext</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tileDelay<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,6),d={class:"custom-container tip"},h=a("p",{class:"custom-container-title"},"TIP",-1),y={href:"https://github.com/ragnarlotus/vue-flux/tree/dev/src/transitions",target:"_blank",rel:"noopener noreferrer"};function m(g,f){const s=o("ExternalLinkIcon");return c(),l("div",null,[r,a("p",null,[n("To know how to add your custom transition to the slider read the "),a("a",u,[n("VueFlux custom transitions section"),t(s)]),n(".")]),k,a("div",d,[h,a("p",null,[n("You can see the "),a("a",y,[n("transitions source code"),t(s)]),n(" to get more ideas or examples.")])])])}const v=e(i,[["render",m],["__file","index.html.vue"]]);export{v as default};
